XCOMM $XFree86: xc/programs/Xserver/hw/xfree86/os-support/bsd/drm/kernel/Imakefile,v 1.6 2001/04/18 14:52:43 dawes Exp $

#include <Server.tmpl>

XCOMM We need to use Linux headers to avoid skew, OS dependencies will be
XCOMM held in a drm_os.h file (eventually/hopefully). Currently these
XCOMM dependencies are stuck in drmP.h

includes:: tdfxinc mgainc gammainc r128inc radeoninc sisinc i810inc

clean::
	rm -f tdfx/tdfx* mga/mga* gamma/gamma* r128/r128* radeon/radeon* sis/sis* i810/i810*

LINUXDRM = ../$(XF86OSSRC)/linux/drm/kernel

LinkFileList(gammainc, $(LINUXDRM)/gamma.h $(LINUXDRM)/gamma_drv.h $(LINUXDRM)/gamma_drv.c $(LINUXDRM)/gamma_dma.c, gamma, .)

LinkFileList(mgainc, $(LINUXDRM)/mga.h $(LINUXDRM)/mga_drv.h $(LINUXDRM)/mga_ucode.h $(LINUXDRM)/mga_dma.c $(LINUXDRM)/mga_drv.c $(LINUXDRM)/mga_state.c $(LINUXDRM)/mga_warp.c, mga, .)

LinkFileList(tdfxinc, $(LINUXDRM)/tdfx.h $(LINUXDRM)/tdfx_drv.c, tdfx, .)

LinkFileList(r128inc, $(LINUXDRM)/r128.h $(LINUXDRM)/r128_cce.c $(LINUXDRM)/r128_drv.c $(LINUXDRM)/r128_drv.h $(LINUXDRM)/r128_state.c, r128, .)

LinkFileList(radeoninc, $(LINUXDRM)/radeon.h $(LINUXDRM)/radeon_drv.h $(LINUXDRM)/radeon_bufs.c $(LINUXDRM)/radeon_cp.c $(LINUXDRM)/radeon_drv.c $(LINUXDRM)/radeon_state.c, radeon, .)

LinkFileList(i810inc, $(LINUXDRM)/i810.h $(LINUXDRM)/i810_dma.c $(LINUXDRM)/i810_drv.c $(LINUXDRM)/i810_drv.h, i810, .)

LinkFileList(sisinc, $(LINUXDRM)/sis.h $(LINUXDRM)/sis_drv.c $(LINUXDRM)/sis_drv.h $(LINUXDRM)/sis_drm.h $(LINUXDRM)/sis_ds.h $(LINUXDRM)/sis_ds.c $(LINUXDRM)/sis_mm.c, sis, .)

LinkSourceFile(ati_pcigart.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_auth.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_bufs.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_context.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_dma.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_drawable.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_drv.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_fops.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_init.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_ioctl.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_lists.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_lock.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_memory.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm_scatter.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drm.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(drmP.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(i810_drm.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(mga_drm.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(r128_drm.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(radeon_drm.h,$(XF86OSSRC)/linux/drm/kernel)
LinkSourceFile(sis_drm.h,$(XF86OSSRC)/linux/drm/kernel)

XCOMM This is a kludge until we determine how best to build the
XCOMM kernel-specific device driver.  This allows us to continue
XCOMM to maintain the single Makefile.bsd with kernel-specific
XCOMM support.  Later, we can move to a different Imakefile.

#if BuildXF86DRI && BuildXF86DRM
all::
	$(MAKE) -f Makefile.bsd

install::
	$(MAKE) -f Makefile.bsd install
#else
all::
	@echo 'Use "make -f Makefile.bsd" to manually build drm.o'
#endif

clean::
	$(MAKE) -f Makefile.bsd clean
